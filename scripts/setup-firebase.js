#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (prompt) => new Promise((resolve) => rl.question(prompt, resolve));

console.log('\nüî• Firebase Setup for ALF Coach\n');
console.log('This wizard will help you set up Firebase for cloud storage.\n');
console.log('If you want to run ALF Coach offline only, press Ctrl+C to exit.\n');

async function setup() {
  try {
    console.log('üìã Prerequisites:');
    console.log('1. Create a Firebase project at https://console.firebase.google.com');
    console.log('2. Enable Authentication (Email/Password)');
    console.log('3. Create a Firestore database');
    console.log('4. Get your Firebase configuration\n');
    
    const ready = await question('Have you completed these steps? (y/n): ');
    if (ready.toLowerCase() !== 'y') {
      console.log('\nüìñ Please complete the prerequisites first.');
      console.log('See docs/firebase-setup.md for detailed instructions.\n');
      process.exit(0);
    }
    
    console.log('\nüîß Firebase Configuration');
    console.log('Paste your Firebase config object from the Firebase console.\n');
    
    const apiKey = await question('API Key: ');
    const authDomain = await question('Auth Domain: ');
    const projectId = await question('Project ID: ');
    const storageBucket = await question('Storage Bucket: ');
    const messagingSenderId = await question('Messaging Sender ID: ');
    const appId = await question('App ID: ');
    
    const firebaseConfig = {
      apiKey: apiKey.trim(),
      authDomain: authDomain.trim(),
      projectId: projectId.trim(),
      storageBucket: storageBucket.trim(),
      messagingSenderId: messagingSenderId.trim(),
      appId: appId.trim()
    };
    
    console.log('\nü§ñ AI Configuration (Optional)');
    const setupAI = await question('Do you want to set up AI-powered conversations? (y/n): ');
    
    let geminiApiKey = '';
    let useAIChat = 'false';
    
    if (setupAI.toLowerCase() === 'y') {
      console.log('\nGet your Gemini API key from: https://makersuite.google.com/app/apikey\n');
      geminiApiKey = await question('Gemini API Key: ');
      useAIChat = 'true';
    }
    
    // Create .env file
    const envContent = `# ALF Coach Environment Variables
# Generated by setup script

# Firebase Configuration
VITE_FIREBASE_CONFIG='${JSON.stringify(firebaseConfig)}'

# AI Configuration
VITE_USE_AI_CHAT=${useAIChat}
VITE_GEMINI_API_KEY=${geminiApiKey.trim()}

# Optional: Firebase Emulators (for local development)
# VITE_USE_EMULATORS=false
`;
    
    const envPath = path.join(process.cwd(), '.env');
    fs.writeFileSync(envPath, envContent);
    
    console.log('\n‚úÖ Setup complete!');
    console.log(`\nüìÑ Created ${envPath}`);
    console.log('\nüöÄ Next steps:');
    console.log('1. Run: npm run dev');
    console.log('2. Test your application');
    console.log('3. Deploy when ready\n');
    
    if (useAIChat === 'false') {
      console.log('üí° Tip: You can enable AI later by updating VITE_USE_AI_CHAT=true in .env\n');
    }
    
  } catch (error) {
    console.error('\n‚ùå Setup failed:', error.message);
  } finally {
    rl.close();
  }
}

setup();