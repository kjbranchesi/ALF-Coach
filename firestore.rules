rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // PRODUCTION-READY SECURITY RULES
    // Last updated: January 2025
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAnonymous() {
      return isAuthenticated() && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    
    function hasValidBlueprintData() {
      return request.resource.data.keys().hasAll(['userId', 'wizardData', 'createdAt', 'updatedAt']) &&
             request.resource.data.userId is string &&
             request.resource.data.wizardData is map;
    }
    
    function isValidUpdate() {
      // Ensure critical fields aren't changed
      return request.resource.data.userId == resource.data.userId &&
             request.resource.data.createdAt == resource.data.createdAt;
    }
    
    // Blueprints - Main collection with secure rules
    match /blueprints/{blueprintId} {
      // Read Rules
      allow read: if 
        // Owner can always read
        isOwner(resource.data.userId) ||
        // Public blueprints (future feature)
        (resource.data.isPublic == true) ||
        // Shared blueprints (future feature)
        (resource.data.sharedWith is list && request.auth.uid in resource.data.sharedWith) ||
        // Anonymous blueprints can be read by anyone (for URL sharing)
        (resource.data.userId == 'anonymous');
      
      // Create Rules
      allow create: if
        // Must be authenticated (even anonymously)
        isAuthenticated() &&
        // Must have valid data structure
        hasValidBlueprintData() &&
        // userId must match auth uid (or be 'anonymous' for anonymous users)
        (request.resource.data.userId == request.auth.uid || 
         (isAnonymous() && request.resource.data.userId == 'anonymous'));
      
      // Update Rules
      allow update: if
        // Must be owner or anonymous blueprint
        (isOwner(resource.data.userId) || resource.data.userId == 'anonymous') &&
        // Must maintain data integrity
        isValidUpdate();
      
      // Delete Rules
      allow delete: if
        // Only owner can delete (not anonymous blueprints)
        isOwner(resource.data.userId);
        
      // Subcollection: Messages (chat history)
      match /messages/{messageId} {
        allow read: if
          // Can read messages if can read parent blueprint
          isOwner(get(/databases/$(database)/documents/blueprints/$(blueprintId)).data.userId) ||
          get(/databases/$(database)/documents/blueprints/$(blueprintId)).data.userId == 'anonymous';
          
        allow create: if
          // Can create messages if can update parent blueprint
          (isOwner(get(/databases/$(database)/documents/blueprints/$(blueprintId)).data.userId) ||
           get(/databases/$(database)/documents/blueprints/$(blueprintId)).data.userId == 'anonymous') &&
          // Message must have required fields
          request.resource.data.keys().hasAll(['role', 'content', 'timestamp']) &&
          request.resource.data.role in ['user', 'assistant', 'system'];
          
        // Messages are immutable once created
        allow update: if false;
        allow delete: if false;
      }
    }
    
    // User profiles - secure personal data
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if 
        isOwner(userId) &&
        request.resource.data.keys().hasAll(['email', 'createdAt']) &&
        request.resource.data.email is string;
      allow update: if 
        isOwner(userId) &&
        request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isOwner(userId);
      
      // Subcollection: User's blueprints metadata
      match /blueprints/{blueprintId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Shared blueprints collection (future feature)
    match /shared/{shareId} {
      allow read: if
        isAuthenticated() &&
        (resource.data.sharedWith == request.auth.uid ||
         resource.data.createdBy == request.auth.uid);
      allow create: if
        isAuthenticated() &&
        request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if
        isOwner(resource.data.createdBy);
    }
    
    // Public templates (read-only)
    match /templates/{templateId} {
      allow read: if true;
      allow write: if false; // Admin only via Firebase Admin SDK
    }
    
    // Analytics collection (write-only for users)
    match /analytics/{eventId} {
      allow read: if false; // Admin only
      allow create: if 
        isAuthenticated() &&
        request.resource.data.keys().hasAll(['userId', 'event', 'timestamp']) &&
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
    
    // Rate limiting collection (internal use)
    match /rateLimits/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Managed by Cloud Functions
    }
  }
}