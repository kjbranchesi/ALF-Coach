rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if user is authenticated (including anonymous)
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Blueprints collection
    match /blueprints/{blueprintId} {
      // Allow read if authenticated and (owner OR anonymous doc)
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || resource.data.userId == 'anonymous');
      
      // Allow listing blueprints for authenticated users
      // This will filter results based on userId in the query
      allow list: if isAuthenticated();
      
      // Allow create if authenticated and userId matches auth
      allow create: if isAuthenticated() && 
        (isOwner(request.resource.data.userId) || 
         (request.auth.isAnonymous == true && request.resource.data.userId == 'anonymous'));
      
      // Allow update if authenticated and (owner OR anonymous doc)
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.userId) || 
         (request.auth.isAnonymous == true && resource.data.userId == 'anonymous'));
      
      // Allow delete only for owner (not anonymous)
      allow delete: if isAuthenticated() && 
        isOwner(resource.data.userId) && 
        !request.auth.isAnonymous;
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Allow read if authenticated and (owner OR anonymous doc)
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || resource.data.userId == 'anonymous');
      
      // Allow listing projects for authenticated users
      allow list: if isAuthenticated();
      
      // Allow create if authenticated and userId matches auth
      allow create: if isAuthenticated() && 
        (isOwner(request.resource.data.userId) || 
         (request.auth.isAnonymous == true && request.resource.data.userId == 'anonymous'));
      
      // Allow update if authenticated and (owner OR anonymous doc)
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.userId) || 
         (request.auth.isAnonymous == true && resource.data.userId == 'anonymous'));
      
      // Allow delete only for owner (not anonymous)
      allow delete: if isAuthenticated() && 
        isOwner(resource.data.userId) && 
        !request.auth.isAnonymous;
    }
    
    // Message subcollections
    match /blueprints/{blueprintId}/messages/{messageId} {
      // Get parent blueprint document
      let blueprint = get(/databases/$(database)/documents/blueprints/$(blueprintId));
      
      // Allow if authenticated and (owner of blueprint OR anonymous blueprint)
      allow read, write: if isAuthenticated() && 
        (isOwner(blueprint.data.userId) || 
         (request.auth.isAnonymous == true && blueprint.data.userId == 'anonymous'));
    }
  }
}