/**
 * NewArchitectureTest.tsx - Wrapper to test the new architecture
 * Accessible at /new route for parallel testing
 */

import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { SOPFlowManager } from '../core/SOPFlowManager';
import { GeminiService } from '../services/GeminiService';
import { ChatInterface } from './chat/ChatInterface';
import { firebaseService } from '../core/services/FirebaseService';
import { useAuth } from '../hooks/useAuth';
import Header from './Header';
import '../styles/app.css';

export const NewArchitectureTest: React.FC = () => {
  const { id, projectId } = useParams<{ id?: string; projectId?: string }>();
  const { userId, user } = useAuth();
  const [flowManager, setFlowManager] = useState<SOPFlowManager | null>(null);
  const [geminiService] = useState(() => new GeminiService());
  const [isReady, setIsReady] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [blueprintId, setBlueprintId] = useState<string>('');

  useEffect(() => {
    const init = async () => {
      try {
        await geminiService.initialize();
        
        // Get effective userId for anonymous users
        const effectiveUserId = userId || (user?.isAnonymous ? 'anonymous' : 'anonymous');
        
        // Check URL params or query string for blueprint ID
        const urlParams = new URLSearchParams(window.location.search);
        const loadBlueprintId = id || projectId || urlParams.get('blueprint');
        
        if (loadBlueprintId && !loadBlueprintId.startsWith('new-')) {
          // Try to load existing blueprint
          const tempManager = new SOPFlowManager(undefined, undefined, effectiveUserId);
          const loaded = await tempManager.loadFromFirebase(loadBlueprintId);
          
          if (loaded) {
            setFlowManager(tempManager);
            setBlueprintId(loadBlueprintId);
          } else {
            // Create new if load failed
            const newManager = new SOPFlowManager(undefined, undefined, effectiveUserId);
            setFlowManager(newManager);
            setBlueprintId(newManager.getBlueprintId());
          }
        } else {
          // Create new blueprint (including when ID starts with 'new-')
          const newManager = new SOPFlowManager(undefined, undefined, effectiveUserId);
          setFlowManager(newManager);
          setBlueprintId(newManager.getBlueprintId());
          
          // Update URL to use real blueprint ID
          if (loadBlueprintId?.startsWith('new-')) {
            window.history.replaceState({}, '', `/app/blueprint/${newManager.getBlueprintId()}`);
          }
        }
        
        setIsReady(true);
      } catch (err) {
        console.error('Failed to initialize:', err);
        setError('Failed to initialize services');
        setIsReady(true); // Continue anyway for demo
      }
    };

    init();
  }, [geminiService, userId, user?.isAnonymous, id, projectId]);

  const handleExportBlueprint = () => {
    if (!flowManager) return;
    
    const blueprint = flowManager.exportBlueprint();
    const jsonStr = JSON.stringify(blueprint, null, 2);
    
    const blob = new Blob([jsonStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ALF-Blueprint-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  const copyShareLink = () => {
    const shareUrl = `${window.location.origin}/new?blueprint=${blueprintId}`;
    navigator.clipboard.writeText(shareUrl);
    alert('Share link copied to clipboard!');
  };

  if (!isReady || !flowManager) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50 dark:bg-gray-900">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">Initializing NEW ALF Coach...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50 dark:bg-gray-900">
        <div className="text-center text-red-600 dark:text-red-400">
          <p>{error}</p>
          <p className="text-sm mt-2">Check console for details</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen flex flex-col bg-gray-50 dark:bg-gray-900">
      {/* Use the shared Header component for consistency */}
      <div className="print-hidden flex-shrink-0 z-50">
        <Header />
      </div>

      {/* Blueprint Tools Bar */}
      {blueprintId && (
        <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-2 flex items-center justify-between flex-shrink-0">
          <div className="flex items-center gap-4">
            <span className="text-xs text-gray-500 dark:text-gray-400">
              Blueprint ID: {blueprintId.slice(0, 12)}...
            </span>
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={copyShareLink}
              className="text-sm bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 px-3 py-1.5 rounded-lg transition-colors shadow-sm flex items-center gap-2"
              title="Copy link to share this blueprint"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              Share
            </button>
          </div>
        </div>
      )}

      {/* Main Chat Interface */}
      <main className="flex-1 overflow-hidden">
        <ChatInterface 
          flowManager={flowManager}
          geminiService={geminiService}
          onExportBlueprint={handleExportBlueprint}
        />
      </main>
    </div>
  );
};