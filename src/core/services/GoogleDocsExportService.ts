/**
 * GoogleDocsExportService.ts - Export blueprints to Google Docs format
 * Creates structured HTML that can be imported into Google Docs
 */

import { BlueprintDoc } from '../types/SOPTypes';

export interface GoogleDocsExport {
  title: string;
  content: string;
  mimeType: string;
}

export class GoogleDocsExportService {
  /**
   * Export blueprint as Google Docs HTML
   */
  async exportToGoogleDocs(blueprint: BlueprintDoc): Promise<GoogleDocsExport> {
    const title = this.generateTitle(blueprint);
    const content = this.generateGoogleDocsHTML(blueprint);
    
    return {
      title,
      content,
      mimeType: 'text/html'
    };
  }

  /**
   * Generate title for the document
   */
  private generateTitle(blueprint: BlueprintDoc): string {
    if (blueprint.ideation?.bigIdea) {
      const shortTitle = blueprint.ideation.bigIdea.split(' ').slice(0, 5).join(' ');
      return `ALF Coach - ${shortTitle}`;
    }
    return 'ALF Coach Project Blueprint';
  }

  /**
   * Generate Google Docs compatible HTML
   */
  private generateGoogleDocsHTML(blueprint: BlueprintDoc): string {
    return `<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>${this.generateTitle(blueprint)}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      line-height: 1.6;
      color: #333;
    }
    h1 {
      color: #2c3e50;
      font-size: 28px;
      margin-bottom: 10px;
      border-bottom: 3px solid #3498db;
      padding-bottom: 10px;
    }
    h2 {
      color: #34495e;
      font-size: 22px;
      margin-top: 30px;
      margin-bottom: 15px;
      border-bottom: 2px solid #ecf0f1;
      padding-bottom: 5px;
    }
    h3 {
      color: #7f8c8d;
      font-size: 18px;
      margin-top: 20px;
      margin-bottom: 10px;
    }
    .section {
      margin-bottom: 30px;
      padding: 15px;
      background-color: #f8f9fa;
      border-radius: 5px;
    }
    .field {
      margin-bottom: 15px;
    }
    .field-label {
      font-weight: bold;
      color: #2c3e50;
      margin-bottom: 5px;
    }
    .field-value {
      margin-left: 20px;
      white-space: pre-line;
    }
    .phase {
      margin-bottom: 20px;
      padding: 10px;
      background-color: #e8f4fd;
      border-left: 4px solid #3498db;
    }
    .rubric-item {
      margin-bottom: 15px;
      padding: 10px;
      background-color: #fff3cd;
      border-left: 4px solid #ffc107;
    }
    ul {
      margin-left: 20px;
    }
    li {
      margin-bottom: 5px;
    }
    .footer {
      margin-top: 50px;
      padding-top: 20px;
      border-top: 2px solid #ecf0f1;
      text-align: center;
      color: #7f8c8d;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <h1>Active Learning Framework Blueprint</h1>
  <p><em>Generated by ALF Coach on ${new Date().toLocaleDateString()}</em></p>

  ${this.renderProjectSetup(blueprint)}
  ${this.renderIdeation(blueprint)}
  ${this.renderJourney(blueprint)}
  ${this.renderDeliverables(blueprint)}
  
  <div class="footer">
    <p>Created with ALF Coach - Active Learning Framework Designer</p>
    <p>Â© ${new Date().getFullYear()} ALF Coach</p>
  </div>
</body>
</html>`;
  }

  /**
   * Render project setup section
   */
  private renderProjectSetup(blueprint: BlueprintDoc): string {
    const { wizard } = blueprint;
    if (!wizard) return '';

    return `
    <div class="section">
      <h2>Project Setup</h2>
      
      <div class="field">
        <div class="field-label">Vision</div>
        <div class="field-value">${this.escapeHtml(wizard.vision)}</div>
      </div>
      
      <div class="field">
        <div class="field-label">Subject</div>
        <div class="field-value">${this.escapeHtml(wizard.subject)}</div>
      </div>
      
      <div class="field">
        <div class="field-label">Students</div>
        <div class="field-value">${this.escapeHtml(wizard.students)}</div>
      </div>
      
      <div class="field">
        <div class="field-label">Scope</div>
        <div class="field-value">${this.escapeHtml(wizard.scope)}</div>
      </div>
    </div>`;
  }

  /**
   * Render ideation section
   */
  private renderIdeation(blueprint: BlueprintDoc): string {
    const { ideation } = blueprint;
    if (!ideation) return '';

    return `
    <div class="section">
      <h2>Ideation</h2>
      
      <div class="field">
        <div class="field-label">Big Idea</div>
        <div class="field-value">${this.escapeHtml(ideation.bigIdea)}</div>
      </div>
      
      <div class="field">
        <div class="field-label">Essential Question</div>
        <div class="field-value">${this.escapeHtml(ideation.essentialQuestion)}</div>
      </div>
      
      <div class="field">
        <div class="field-label">Challenge</div>
        <div class="field-value">${this.escapeHtml(ideation.challenge)}</div>
      </div>
    </div>`;
  }

  /**
   * Render journey section
   */
  private renderJourney(blueprint: BlueprintDoc): string {
    const { journey } = blueprint;
    if (!journey) return '';

    return `
    <div class="section">
      <h2>Learning Journey</h2>
      
      <h3>Journey Phases</h3>
      ${journey.phases.map((phase, index) => `
        <div class="phase">
          <h4>Phase ${index + 1}: ${this.escapeHtml(phase.title)}</h4>
          <p>${this.escapeHtml(phase.description)}</p>
        </div>
      `).join('')}
      
      <h3>Activities</h3>
      <ul>
        ${journey.activities.map(activity => 
          `<li>${this.escapeHtml(activity)}</li>`
        ).join('')}
      </ul>
      
      <h3>Resources</h3>
      <ul>
        ${journey.resources.map(resource => 
          `<li>${this.escapeHtml(resource)}</li>`
        ).join('')}
      </ul>
    </div>`;
  }

  /**
   * Render deliverables section
   */
  private renderDeliverables(blueprint: BlueprintDoc): string {
    const { deliverables } = blueprint;
    if (!deliverables) return '';

    return `
    <div class="section">
      <h2>Student Deliverables</h2>
      
      <h3>Milestones</h3>
      <ul>
        ${deliverables.milestones.map((milestone, index) => {
          const title = typeof milestone === 'string' ? milestone : milestone.title;
          return `<li><strong>Phase ${index + 1}:</strong> ${this.escapeHtml(title)}</li>`;
        }).join('')}
      </ul>
      
      <h3>Assessment Rubric</h3>
      ${deliverables.rubric.criteria.map(criterion => `
        <div class="rubric-item">
          <h4>${this.escapeHtml(criterion.criterion)} (${criterion.weight}%)</h4>
          <p>${this.escapeHtml(criterion.description)}</p>
        </div>
      `).join('')}
      
      <h3>Impact</h3>
      <div class="field">
        <div class="field-label">Audience</div>
        <div class="field-value">${this.escapeHtml(deliverables.impact.audience)}</div>
      </div>
      <div class="field">
        <div class="field-label">Method</div>
        <div class="field-value">${this.escapeHtml(deliverables.impact.method)}</div>
      </div>
      ${deliverables.impact.purpose ? `
      <div class="field">
        <div class="field-label">Purpose</div>
        <div class="field-value">${this.escapeHtml(deliverables.impact.purpose)}</div>
      </div>` : ''}
    </div>`;
  }

  /**
   * Escape HTML special characters
   */
  private escapeHtml(text: string): string {
    if (!text) return '';
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;')
      .replace(/\n/g, '<br>');
  }

  /**
   * Generate a simple text version for copy/paste
   */
  async exportAsPlainText(blueprint: BlueprintDoc): Promise<string> {
    const sections = [];
    
    // Header
    sections.push('ACTIVE LEARNING FRAMEWORK BLUEPRINT');
    sections.push(`Generated: ${new Date().toLocaleString()}`);
    sections.push('=' .repeat(50));
    sections.push('');
    
    // Project Setup
    if (blueprint.wizard) {
      sections.push('PROJECT SETUP');
      sections.push('-'.repeat(20));
      sections.push(`Vision: ${blueprint.wizard.vision}`);
      sections.push(`Subject: ${blueprint.wizard.subject}`);
      sections.push(`Students: ${blueprint.wizard.students}`);
      sections.push(`Scope: ${blueprint.wizard.scope}`);
      if (blueprint.wizard.location) {
        sections.push(`Location: ${blueprint.wizard.location}`);
      }
      if (blueprint.wizard.materials) {
        sections.push(`Student Materials: ${blueprint.wizard.materials}`);
      }
      if (blueprint.wizard.teacherResources) {
        sections.push(`Teacher Resources: ${blueprint.wizard.teacherResources}`);
      }
      sections.push('');
    }
    
    // Ideation
    if (blueprint.ideation) {
      sections.push('IDEATION');
      sections.push('-'.repeat(20));
      sections.push(`Big Idea: ${blueprint.ideation.bigIdea}`);
      sections.push(`Essential Question: ${blueprint.ideation.essentialQuestion}`);
      sections.push(`Challenge: ${blueprint.ideation.challenge}`);
      sections.push('');
    }
    
    // Journey
    if (blueprint.journey) {
      sections.push('LEARNING JOURNEY');
      sections.push('-'.repeat(20));
      sections.push('Phases:');
      blueprint.journey.phases.forEach((phase, index) => {
        sections.push(`  Phase ${index + 1}: ${phase.title}`);
        sections.push(`    ${phase.description}`);
      });
      sections.push('');
      sections.push('Activities:');
      blueprint.journey.activities.forEach(activity => {
        sections.push(`  - ${activity}`);
      });
      sections.push('');
      sections.push('Resources:');
      blueprint.journey.resources.forEach(resource => {
        sections.push(`  - ${resource}`);
      });
      sections.push('');
    }
    
    // Deliverables
    if (blueprint.deliverables) {
      sections.push('STUDENT DELIVERABLES');
      sections.push('-'.repeat(20));
      sections.push('Milestones:');
      blueprint.deliverables.milestones.forEach((milestone, index) => {
        const title = typeof milestone === 'string' ? milestone : milestone.title;
        sections.push(`  Phase ${index + 1}: ${title}`);
      });
      sections.push('');
      sections.push('Rubric:');
      blueprint.deliverables.rubric.criteria.forEach(criterion => {
        sections.push(`  ${criterion.criterion} (${criterion.weight}%)`);
        sections.push(`    ${criterion.description}`);
      });
      sections.push('');
      sections.push('Impact:');
      sections.push(`  Audience: ${blueprint.deliverables.impact.audience}`);
      sections.push(`  Method: ${blueprint.deliverables.impact.method}`);
      if (blueprint.deliverables.impact.purpose) {
        sections.push(`  Purpose: ${blueprint.deliverables.impact.purpose}`);
      }
    }
    
    return sections.join('\n');
  }
}

// Export singleton instance
export const googleDocsExportService = new GoogleDocsExportService();